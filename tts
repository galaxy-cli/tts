#!/bin/bash
#       | |_| |_ ___
#       | __| __/ __|
#       | |_| |_\__ \
#        \__|\__|___|
# tts - Simple text-to-speech utility using Festival and optional GPT integration
# Author: galaxy-cli
# Project: https://github.com/galaxy-cli/tts

# --- Dependency Check & Install Section ---

missing=()

for cmd in git festival xsel; do
    command -v "$cmd" >/dev/null 2>&1 || missing+=("$cmd")
done

# Check for tgpt (special case: directory and command)
if ! command -v tgpt >/dev/null 2>&1; then
    missing+=("tgpt")
fi

if [ "${#missing[@]}" -gt 0 ]; then
    echo "The following dependencies are missing: ${missing[*]}"
    read -rp "Do you want to install them now? [Y/n] " yn
    yn=${yn:-Y}
    if [[ $yn =~ ^[Yy]$ ]]; then
        sudo apt update
        # Install system packages
        for pkg in festival xsel; do
            if [[ " ${missing[*]} " == *" $pkg "* ]]; then
                sudo apt install -y "$pkg"
            fi
        done
        # Install tgpt if missing
        if [[ " ${missing[*]} " == *" tgpt "* ]]; then
            if [ -d tgpt ]; then
                echo "tgpt directory already exists. Skipping clone."
            else
                git clone https://github.com/aandrew-me/tgpt.git
                sh tgpt/install
            fi
        fi
    else
        echo "Cannot continue without required dependencies."
        exit 1
    fi
fi

# --- Usage Info ---

print_usage() {
    cat <<EOF
USAGE
  tts --clip [--speed NUM]
  tts --file FILE [--speed NUM]
  tts --tgpt [--speed NUM]
FLAGS
  --clip        Use clipboard (xsel)
  --file        Use file
  --tgpt        Use tgpt output
  --speed       Set TTS speed (Festival Duration_Stretch, e.g. 0.5= faster, 1.5= slower)
  --help        Show this help message
EOF
}

# --- Option Parsing ---

input_source=""
file_name=""
speed=""

while [[ $# -gt 0 ]]; do
    case "$1" in
        --clip)
            input_source="clip"
            shift
            ;;
        --file)
            if [[ $# -lt 2 ]]; then
                echo "Error: --file requires a filename argument."
                exit 1
            fi
            input_source="file"
            file_name="$2"
            shift 2
            ;;
        --tgpt)
            input_source="tgpt"
            shift
            ;;
        --speed)
            if [[ $# -lt 2 ]]; then
                echo "Error: --speed requires a numeric argument."
                exit 1
            fi
            speed="$2"
            # Validate speed is a positive decimal number
            if ! [[ $speed =~ ^[0-9]*\.?[0-9]+$ ]]; then
                echo "Error: --speed argument must be a positive number."
                exit 1
            fi
            shift 2
            ;;
        --help)
            print_usage
            exit 0
            ;;
        *)
            print_usage
            exit 1
            ;;
    esac
done

# --- Require valid input source flag ---
if [[ -z "$input_source" ]]; then
    print_usage
    exit 1
fi

# --- Retrieve text based on input source ---

case "$input_source" in
    clip)
        text="$(xsel --clipboard || true)"
        if [[ -z "$text" ]]; then
            echo "Clipboard is empty."
            exit 1
        fi
        ;;
    file)
        if [[ ! -f "$file_name" || ! -r "$file_name" ]]; then
            echo "Error: Cannot read file '$file_name'."
            exit 1
        fi
        text="$(cat "$file_name")"
        ;;
    tgpt)
        output=$(mktemp)
        trap "rm -f '$output'" EXIT
        if ! tgpt > "$output"; then
            echo "Error: Failed to run tgpt."
            exit 1
        fi
        text="$(<"$output")"
        if [[ -z "$text" ]]; then
            echo "tgpt returned no text."
            exit 1
        fi
        ;;
    *)
        echo "Error: No valid input source specified."
        print_usage
        exit 1
        ;;
esac

# --- Prepare and execute TTS ---

# Escape double quotes in the text for festival Scheme string
escaped_text=$(printf '%s' "$text" | sed 's/"/\\"/g')

if [[ -n "$speed" ]]; then
    echo "(Parameter.set 'Duration_Stretch $speed) (SayText \"$escaped_text\")" | festival --pipe
else
    echo "$text" | festival --tts
fi
